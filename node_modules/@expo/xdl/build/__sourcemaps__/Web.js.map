{"version":3,"sources":["Web.js"],"names":["isDebugModeEnabled","getenv","boolish","isInfoEnabled","shouldWebpackClearLogs","logEnvironmentInfo","projectRoot","tag","config","mode","logWarning","chalk","bold","async","invokePossibleFunctionAsync","objectOrMethod","args","await","applyEnvironmentVariables","console","log","bgYellow","black","output","devtoolLineToLine","pathinfo","optimization","minimize","namedModules","namedChunks","moduleIds","chunkIds","splitChunks","name","invokeWebpackConfigAsync","env","argv","projectWebpackConfig","path","resolve","let","fs","existsSync","webpackConfig","require","createExpoWebpackConfigAsync","openProjectAsync","Doctor","validateWebSupportAsync","url","UrlUtils","constructWebAppUrlAsync","openBrowser","success","e","Logger","global","error","message","onlySupportsWebAsync","exp","readConfigJsonAsync","Array","isArray","platforms","length"],"mappings":"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","file":"../Web.js","sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport openBrowser from 'react-dev-utils/openBrowser';\n\nimport getenv from 'getenv';\nimport chalk from 'chalk';\nimport Logger from './Logger';\nimport * as Doctor from './project/Doctor';\nimport { readConfigJsonAsync, logWarning } from './project/ProjectUtils';\nimport * as UrlUtils from './UrlUtils';\n\n// When you have errors in the production build that aren't present in the development build you can use `EXPO_WEB_DEBUG=true expo start --no-dev` to debug those errors.\n// - Prevent the production build from being minified\n// - Include file path info comments in the bundle\nexport function isDebugModeEnabled() {\n  return getenv.boolish('EXPO_WEB_DEBUG', false);\n}\n\nexport function isInfoEnabled() {\n  return getenv.boolish('EXPO_WEB_INFO', false);\n}\n\nexport function shouldWebpackClearLogs() {\n  return !isDebugModeEnabled() && !isInfoEnabled() && !getenv.boolish('EXPO_DEBUG', false);\n}\n\nexport function logEnvironmentInfo(projectRoot, tag, config) {\n  if (isDebugModeEnabled() && config.mode === 'production') {\n    logWarning(\n      projectRoot,\n      tag,\n      `Webpack is bundling your project in \\`production\\` mode with the ${chalk.bold(\n        '`EXPO_WEB_DEBUG`'\n      )} environment variable enabled. You should toggle it off before building for production.`\n    );\n  }\n}\n\nasync function invokePossibleFunctionAsync(objectOrMethod, ...args) {\n  if (typeof objectOrMethod === 'function') {\n    return await objectOrMethod(...args);\n  } else {\n    return objectOrMethod;\n  }\n}\n\nfunction applyEnvironmentVariables(config) {\n  // Use EXPO_DEBUG_WEB=true to enable debugging features for cases where the prod build\n  // has errors that aren't caught in development mode.\n  // Related: https://github.com/expo/expo-cli/issues/614\n  if (isDebugModeEnabled() && config.mode === 'production') {\n    console.log(chalk.bgYellow.black('Bundling the project in debug mode.'));\n    // Enable line to line mapped mode for all/specified modules.\n    // Line to line mapped mode uses a simple SourceMap where each line of the generated source is mapped to the same line of the original source.\n    // Itâ€™s a performance optimization. Only use it if your performance need to be better and you are sure that input lines match which generated lines.\n    // true enables it for all modules (not recommended)\n    config.output.devtoolLineToLine = true;\n\n    // Add comments that describe the file import/exports.\n    // This will make it easier to debug.\n    config.output.pathinfo = true;\n    // Prevent minimizing when running in debug mode.\n    config.optimization.minimize = false;\n    // Instead of numeric ids, give modules readable names for better debugging.\n    config.optimization.namedModules = true;\n    // Instead of numeric ids, give chunks readable names for better debugging.\n    config.optimization.namedChunks = true;\n    // Readable ids for better debugging.\n    config.optimization.moduleIds = 'named';\n    // if optimization.namedChunks is enabled optimization.chunkIds is set to 'named'.\n    // This will manually enable it just to be safe.\n    config.optimization.chunkIds = 'named';\n\n    if (config.optimization.splitChunks) {\n      config.optimization.splitChunks.name = true;\n    }\n  }\n\n  return config;\n}\n\nexport async function invokeWebpackConfigAsync(env, argv) {\n  // Check if the project has a webpack.config.js in the root.\n  const projectWebpackConfig = path.resolve(env.projectRoot, 'webpack.config.js');\n  let config;\n  if (fs.existsSync(projectWebpackConfig)) {\n    const webpackConfig = require(projectWebpackConfig);\n    config = await invokePossibleFunctionAsync(webpackConfig, env, argv);\n  } else {\n    // Fallback to the default expo webpack config.\n    const createExpoWebpackConfigAsync = require('@expo/webpack-config');\n    config = await createExpoWebpackConfigAsync(env, argv);\n  }\n  return applyEnvironmentVariables(config);\n}\n\nexport async function openProjectAsync(projectRoot) {\n  await Doctor.validateWebSupportAsync(projectRoot);\n\n  try {\n    let url = await UrlUtils.constructWebAppUrlAsync(projectRoot);\n    openBrowser(url);\n    return { success: true, url };\n  } catch (e) {\n    Logger.global.error(`Couldn't start project on web: ${e.message}`);\n    return { success: false, error: e };\n  }\n}\n\n// If platforms only contains the \"web\" field\nexport async function onlySupportsWebAsync(projectRoot) {\n  const { exp } = await readConfigJsonAsync(projectRoot);\n  if (Array.isArray(exp.platforms) && exp.platforms.length === 1) {\n    return exp.platforms[0] === 'web';\n  }\n  return false;\n}\n"],"sourceRoot":"/@expo/xdl@56.2.0/src"}